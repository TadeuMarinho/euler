package net.projecteuler.solution;

import static net.projecteuler.util.ProblemUtil.quantityOfFactors;
import static net.projecteuler.util.ProblemUtil.triangleNumber;

public class Problem012 implements Problem {

	@Override
	public String getName() {
		return "Highly divisible triangular number.";
	}

	@Override
	public String getDescription() {
		StringBuilder description = new StringBuilder();
		description.append("The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be \n ");
		description.append("1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ... \n");
		description.append("Let us list the factors of the first seven triangle numbers: \n");
		description.append("1:  1 \n");
		description.append("3:  1, 3 \n");
		description.append("6:  1, 2, 3, 6 \n");
		description.append("10: 1, 2, 5, 10 \n");
		description.append("15: 1, 3, 5, 15 \n");
		description.append("21: 1, 3, 7, 21 \n");
		description.append("28: 1, 2, 4, 7, 14, 28 \n");
		description.append("We can see that 28 is the first triangle number to have over five divisors.");
		description.append("What is the value of the first triangle number to have over five hundred divisors?");
		
		return description.toString();
	}

	@Override
	public String solve() {
		long result = 0;
		long triangleNumberPosition = 1;
		while (true) {
			result = triangleNumber(triangleNumberPosition++);
			if (quantityOfFactors(result) > 500) {
				break;
			}
		}
		
		return Long.toString(result);
	}

	@Override
	public String solveAsProposed() {
		return "To implement";
	}
}